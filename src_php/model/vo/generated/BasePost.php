<?php

/**
 * BasePost
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $userId
 * @property integer $categoryId
 * @property string $title
 * @property clob $message
 * @property timestamp $createDate
 * @property timestamp $modDate
 * @property User $User
 * @property Category $Category
 * @property Doctrine_Collection $comments
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BasePost extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('Post');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('userId', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('categoryId', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('title', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('message', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('createDate', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('modDate', 'timestamp', null, array(
             'type' => 'timestamp',
             'default' => 'CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP',
             ));


        $this->index('fk_Post_User1', array(
             'fields' => 
             array(
              0 => 'userId',
             ),
             ));
        $this->index('fk_Post_Category1', array(
             'fields' => 
             array(
              0 => 'categoryId',
             ),
             ));
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'userId',
             'foreign' => 'id',
             'onDelete' => 'cascade',
             'onUpdate' => 'cascade'));

        $this->hasOne('Category', array(
             'local' => 'categoryId',
             'foreign' => 'id',
             'onDelete' => 'set null',
             'onUpdate' => 'cascade'));

        $this->hasMany('Comment as comments', array(
             'local' => 'id',
             'foreign' => 'postId'));
    }

    public function construct()
    {
        $this->mapValue('_explicitType', 'model.vo.Post');
    }
}