<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:services="model.services.*" applicationComplete="init()"
					   >
	<fx:Declarations>
		<services:UserService id="userService" result="resultHandler(event)" fault="faultHandler(event)" />
		<services:TopicService id="topicService" result="result(event)" fault="fault(event)" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import model.services.PostService;
			import model.vo.*;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.messaging.messages.RemotingMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.aerial.rpc.operation.Operation;
			
			SomethingMessage;
			
			public var user:UserVO;
			
			
			public function init():void
			{
				WindowStuff();
				
				testMethod();
			}

			
			public function testMethod():void
			{
				var user:UserVO = new UserVO();

                var sp1:SpecialtyVO = new SpecialtyVO();
                sp1.id = 1;
                sp1.name = "Test";

				//user.specialties = [sp1];
                userService.save(user).execute();
			}
			
			
			public function testCallbacks():void
			{
			/* 	this.test2Service.findAll().callback(myCallBack).execute();
				this.test2Service.findAll().execute();
				this.test2Service.findAll().callback(myCallBack).execute(); */
			}
						
			public function WindowStuff():void
			{
				nativeWindow.x = Screen.mainScreen.bounds.width - width - 50;
				nativeWindow.y = Screen.mainScreen.bounds.height - height - 150;
				
				nativeWindow.alwaysInFront = false;
				nativeWindow.orderToFront();
			}
			
			
			protected function resultHandler(event:ResultEvent):void
			{
				var message:RemotingMessage = event.token.message as RemotingMessage;
				var operation:String = message.source + "." + message.operation;
				
				switch(operation)
				{
					
					case "UserService.get":
						
						break;
					case "UserService.getAll":
						
						break;
					case "UserService.getRelated":
						if(message.body[0] == "inputLookups"){
							
						}
						break;
					case "UserService.update":
						
						break;
					case "UserService.save":
						
						break;
					
				}
			}
			
			
			protected function faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString);
			}
			
			
			public function myCallBack(event:ResultEvent):void
			{
				trace("CALLBACK_1:"  + event.result.toString());	
			}
			
			
			protected function result(event:ResultEvent):void
			{
				trace("RESULT: " + event.result.toString());
			}
			
			
			protected function fault(event:FaultEvent):void
			{
				trace("test fault");
			}
			
			
			
		]]>
	</fx:Script>
	<s:Button x="153" y="98" label="Button" click="testMethod()"/>
	
	
</s:WindowedApplication>
