<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="100%" height="100%"
		  title="Posts ({this.posts.length})"
		  xmlns:service="model.services.*"
		  >
	
	<mx:Script>
		<![CDATA[
			import model.vo.PostVO;
			import model.vo.TopicVO;
			import model.vo.UserVO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.messaging.messages.RemotingMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var user:UserVO;
			
			[Bindable]
			public var posts:ArrayCollection;
			
			private var _currentTopic:TopicVO;
			

			public function get currentTopic():TopicVO{
				return _currentTopic;
			}
			
			[Bindable]
			public function set currentTopic(topic:TopicVO):void
			{
				_currentTopic = topic;
				if(topic != null){
					this.postService.findAll({"topicId": this.currentTopic.id});
				}else{
					posts = new ArrayCollection();  //We need to clear out the Posts if no Topic is selected.
				}
			} 
			
			
			private function resultHandler(event:ResultEvent):void
			{
				var message:RemotingMessage = event.token.message as RemotingMessage;
				var operation:String = message.source + "." + message.operation;
				
				switch(operation)
				{
					
					case "postService.findAll":
						this.posts = event.result as ArrayCollection;
						break;
					case "postService.save":
						this.postService.findAll({"topicId":this.currentTopic.id});
						break;
					case "postService.update":
						this.postService.findAll({"topicId":this.currentTopic.id});
						break;
					case "postService.drop":
						this.postService.findAll({"topicId":this.currentTopic.id});
						break;
					case "postService.findAll":
						this.posts = (event.result as ArrayCollection);
						break;
				}
			}
			
			
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show("Error in Post.mxml: " + event.fault.faultString);
			}
			
			
			public function insertPost(title:String, message:String):void
			{
				var post:PostVO = new PostVO();
				post.userId = this.user.id;
				post.topicId = this.currentTopic.id;
				post.title = title;
				post.message = message;
				this.postService.save(post);
			}
			
			public function deleteTopic():void
			{
				var post:PostVO = this.postList.selectedItem as PostVO;
				this.postService.drop(post);
			}
			
			
			public function clickPostItem(event:ListEvent):void
			{
				this.postTitle.text = (event.itemRenderer.data as PostVO).title;
				this.postMessage.text = (event.itemRenderer.data as PostVO).message;
			}
			
		]]>
	</mx:Script>
	
	<service:PostService id="postService" result="resultHandler(event)" fault="faultHandler(event)" />
	
	<mx:List id="postList" dataProvider="{this.posts}" width="100%" change="clickPostItem(event)">
		<mx:itemRenderer>
			<mx:Component>
				<mx:HBox>
					<mx:Box>
						<mx:Label text="UserID: {data.userId}"/>
					</mx:Box>
					<mx:VBox>
						<mx:Label text="{data.title}" fontWeight="bold"/>
						<mx:Text text="{data.message}"/>
					</mx:VBox>
				</mx:HBox>
			</mx:Component>
		</mx:itemRenderer>
	</mx:List>
	
	
	
	<mx:ControlBar>
		<mx:HBox>
			<mx:Label text="Post Title:" />
			<mx:TextInput id="postTitle" text="" />
			<mx:Label text="Message" />
			<mx:TextInput id="postMessage" text="" />
			<mx:Button label="Add" click="insertPost(this.postTitle.text, this.postMessage.text)" enabled="{Boolean(currentTopic != null)}"  />
		<!--	<mx:Button label="Update" click="updateTopic(this.topicName.text, this.topicDescription.text)"  enabled="{(postList.selectedItem == null ? false : true)}" />-->
			<mx:Button label="Delete" click="deleteTopic()" enabled="{Boolean(postList.selectedItem != null)}" />
		</mx:HBox>
	</mx:ControlBar>
	
	
</mx:Panel>
